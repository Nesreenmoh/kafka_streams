/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.example.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Avro schema for Bank Account Balance */
@org.apache.avro.specific.AvroGenerated
public class BankAccountBalanceEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1871055969060968085L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BankAccountBalanceEvent\",\"namespace\":\"org.example.model\",\"doc\":\"Avro schema for Bank Account Balance\",\"fields\":[{\"name\":\"Name\",\"type\":\"string\",\"doc\":\"Name of the Account\"},{\"name\":\"Amount\",\"type\":\"double\",\"doc\":\"Amount of the Bank Account\"},{\"name\":\"Time\",\"type\":\"long\",\"doc\":\"Time of the transaction\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BankAccountBalanceEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BankAccountBalanceEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BankAccountBalanceEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BankAccountBalanceEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BankAccountBalanceEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BankAccountBalanceEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BankAccountBalanceEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BankAccountBalanceEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BankAccountBalanceEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Name of the Account */
  private java.lang.CharSequence Name;
  /** Amount of the Bank Account */
  private double Amount;
  /** Time of the transaction */
  private long Time;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BankAccountBalanceEvent() {}

  /**
   * All-args constructor.
   * @param Name Name of the Account
   * @param Amount Amount of the Bank Account
   * @param Time Time of the transaction
   */
  public BankAccountBalanceEvent(java.lang.CharSequence Name, java.lang.Double Amount, java.lang.Long Time) {
    this.Name = Name;
    this.Amount = Amount;
    this.Time = Time;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Name;
    case 1: return Amount;
    case 2: return Time;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Name = (java.lang.CharSequence)value$; break;
    case 1: Amount = (java.lang.Double)value$; break;
    case 2: Time = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'Name' field.
   * @return Name of the Account
   */
  public java.lang.CharSequence getName() {
    return Name;
  }


  /**
   * Sets the value of the 'Name' field.
   * Name of the Account
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.Name = value;
  }

  /**
   * Gets the value of the 'Amount' field.
   * @return Amount of the Bank Account
   */
  public double getAmount() {
    return Amount;
  }


  /**
   * Sets the value of the 'Amount' field.
   * Amount of the Bank Account
   * @param value the value to set.
   */
  public void setAmount(double value) {
    this.Amount = value;
  }

  /**
   * Gets the value of the 'Time' field.
   * @return Time of the transaction
   */
  public long getTime() {
    return Time;
  }


  /**
   * Sets the value of the 'Time' field.
   * Time of the transaction
   * @param value the value to set.
   */
  public void setTime(long value) {
    this.Time = value;
  }

  /**
   * Creates a new BankAccountBalanceEvent RecordBuilder.
   * @return A new BankAccountBalanceEvent RecordBuilder
   */
  public static org.example.model.BankAccountBalanceEvent.Builder newBuilder() {
    return new org.example.model.BankAccountBalanceEvent.Builder();
  }

  /**
   * Creates a new BankAccountBalanceEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BankAccountBalanceEvent RecordBuilder
   */
  public static org.example.model.BankAccountBalanceEvent.Builder newBuilder(org.example.model.BankAccountBalanceEvent.Builder other) {
    if (other == null) {
      return new org.example.model.BankAccountBalanceEvent.Builder();
    } else {
      return new org.example.model.BankAccountBalanceEvent.Builder(other);
    }
  }

  /**
   * Creates a new BankAccountBalanceEvent RecordBuilder by copying an existing BankAccountBalanceEvent instance.
   * @param other The existing instance to copy.
   * @return A new BankAccountBalanceEvent RecordBuilder
   */
  public static org.example.model.BankAccountBalanceEvent.Builder newBuilder(org.example.model.BankAccountBalanceEvent other) {
    if (other == null) {
      return new org.example.model.BankAccountBalanceEvent.Builder();
    } else {
      return new org.example.model.BankAccountBalanceEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for BankAccountBalanceEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BankAccountBalanceEvent>
    implements org.apache.avro.data.RecordBuilder<BankAccountBalanceEvent> {

    /** Name of the Account */
    private java.lang.CharSequence Name;
    /** Amount of the Bank Account */
    private double Amount;
    /** Time of the transaction */
    private long Time;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.example.model.BankAccountBalanceEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Name)) {
        this.Name = data().deepCopy(fields()[0].schema(), other.Name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.Amount)) {
        this.Amount = data().deepCopy(fields()[1].schema(), other.Amount);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.Time)) {
        this.Time = data().deepCopy(fields()[2].schema(), other.Time);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing BankAccountBalanceEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(org.example.model.BankAccountBalanceEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.Name)) {
        this.Name = data().deepCopy(fields()[0].schema(), other.Name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Amount)) {
        this.Amount = data().deepCopy(fields()[1].schema(), other.Amount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Time)) {
        this.Time = data().deepCopy(fields()[2].schema(), other.Time);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'Name' field.
      * Name of the Account
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return Name;
    }


    /**
      * Sets the value of the 'Name' field.
      * Name of the Account
      * @param value The value of 'Name'.
      * @return This builder.
      */
    public org.example.model.BankAccountBalanceEvent.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.Name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Name' field has been set.
      * Name of the Account
      * @return True if the 'Name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Name' field.
      * Name of the Account
      * @return This builder.
      */
    public org.example.model.BankAccountBalanceEvent.Builder clearName() {
      Name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Amount' field.
      * Amount of the Bank Account
      * @return The value.
      */
    public double getAmount() {
      return Amount;
    }


    /**
      * Sets the value of the 'Amount' field.
      * Amount of the Bank Account
      * @param value The value of 'Amount'.
      * @return This builder.
      */
    public org.example.model.BankAccountBalanceEvent.Builder setAmount(double value) {
      validate(fields()[1], value);
      this.Amount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Amount' field has been set.
      * Amount of the Bank Account
      * @return True if the 'Amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Amount' field.
      * Amount of the Bank Account
      * @return This builder.
      */
    public org.example.model.BankAccountBalanceEvent.Builder clearAmount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Time' field.
      * Time of the transaction
      * @return The value.
      */
    public long getTime() {
      return Time;
    }


    /**
      * Sets the value of the 'Time' field.
      * Time of the transaction
      * @param value The value of 'Time'.
      * @return This builder.
      */
    public org.example.model.BankAccountBalanceEvent.Builder setTime(long value) {
      validate(fields()[2], value);
      this.Time = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Time' field has been set.
      * Time of the transaction
      * @return True if the 'Time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Time' field.
      * Time of the transaction
      * @return This builder.
      */
    public org.example.model.BankAccountBalanceEvent.Builder clearTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BankAccountBalanceEvent build() {
      try {
        BankAccountBalanceEvent record = new BankAccountBalanceEvent();
        record.Name = fieldSetFlags()[0] ? this.Name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.Amount = fieldSetFlags()[1] ? this.Amount : (java.lang.Double) defaultValue(fields()[1]);
        record.Time = fieldSetFlags()[2] ? this.Time : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BankAccountBalanceEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<BankAccountBalanceEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BankAccountBalanceEvent>
    READER$ = (org.apache.avro.io.DatumReader<BankAccountBalanceEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.Name);

    out.writeDouble(this.Amount);

    out.writeLong(this.Time);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.Name = in.readString(this.Name instanceof Utf8 ? (Utf8)this.Name : null);

      this.Amount = in.readDouble();

      this.Time = in.readLong();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.Name = in.readString(this.Name instanceof Utf8 ? (Utf8)this.Name : null);
          break;

        case 1:
          this.Amount = in.readDouble();
          break;

        case 2:
          this.Time = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










